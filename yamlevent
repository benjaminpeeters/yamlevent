#!/bin/bash

# yamlevent - Unified YAML event management tool
#
# PURPOSE: Create new YAML events or add content to existing events
#
# MODES:
#   --new      Create new event with metadata and initial content
#   --add      Add content to existing event
#   --help     Show comprehensive help and examples
#   --version  Show version information
#
# For detailed documentation, see: yamlevent --help

# Get the directory where this script is located
YAMLEVENT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source all library files
source "$YAMLEVENT_DIR/lib/utils.sh"
source "$YAMLEVENT_DIR/lib/help.sh"
source "$YAMLEVENT_DIR/lib/new.sh"
source "$YAMLEVENT_DIR/lib/add.sh"

yamlevent() {
    # Check for mode flags first
    local mode=""
    if [[ "$1" == "--new" ]]; then
        mode="new"
        shift
    elif [[ "$1" == "--add" ]]; then
        mode="add"
        shift
    elif [[ "$1" == "--help" || "$1" == "-h" ]]; then
        _show_help
        return 0
    elif [[ "$1" == "--version" || "$1" == "-v" ]]; then
        echo "yamlevent version 0.2.0"
        return 0
    fi
    
    # If no mode specified, try to infer from arguments
    if [[ -z "$mode" ]]; then
        if [[ $# -ge 5 && "$2" =~ ^[0-9]+$ ]]; then
            mode="new"
        elif [[ $# -ge 2 ]]; then
            mode="add"
        else
            echo "ERROR: Could not determine mode. Use --new or --add" >&2
            echo "       Run 'yamlevent --help' for usage information" >&2
            return 1
        fi
    fi
    
    # Dispatch to appropriate function
    case "$mode" in
        "new")
            _yamlevent_new "$@"
            ;;
        "add")
            _yamlevent_add "$@"
            ;;
        *)
            echo "ERROR: Invalid mode '$mode'" >&2
            return 1
            ;;
    esac
}

# If script is executed directly (not sourced), run yamlevent function
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    yamlevent "$@"
fi